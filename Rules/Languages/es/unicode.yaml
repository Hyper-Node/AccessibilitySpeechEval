---
 # Note to translators:
 #   most languages don't have two ways to pronounce 'a' -- if not need, remove the rules and change "B-Z" to "A-Z"
 #   some languages say the word for "uppercase" after the letter. Make sure to change that where appropriate by moving some code around
 - "a": 
    - test: 
        if: "$TTS='none'"
        then: [t: "a"]                              #  long "a" sound in all speech engines I tested (espeak, MS SAPI, eloquence,   (en: 'eigh', google translation)
        else: [spell: "'a'"]                        #     AWS Polly, ReadSpeaker, NaturalReader, google cloud, nuance, ibm watson)
 - "b-z": 
    - test: 
        if: "$TTS='none'"
        then: [t: "a"]                              #   (en: '.', google translation)
        else: [spell: "'.'"]                       

 # Capital letters are a little tricky: users can pick their favorite word (something that was requested) and 
 # screen readers have options to use pitch changes or beeps instead of or in addition to say "cap"
 # Also, if a user can see the screen, they probably don't need to hear "cap", but if they specified an override, they must want to hear the override.

 - "A":
    - test: 
        if: "$CapitalLetters_Beep"
        then:
        - audio:
            value: "beep.mp4"
            replace: []
    - test: 
        if: "$CapitalLetters_UseWord"
        then_test:
          if: "$SpeechOverrides_CapitalLetters = ''"
          then_test:
            if: "$Impairment = 'Blindness'"
            then: [t: "mayúscula"]                  #   (en: 'cap', google translation)
          else: [x: "$SpeechOverrides_CapitalLetters"]
    - pitch:
        value: "$CapitalLetters_Pitch"
        replace:
        - test:
            if: "$TTS='none'"
            then: [t: "A"]                          #   (en: 'eigh', google translation)
            else: [spell: "'a'"]
            
 - "B-Z":
    - test: 
        if: "$CapitalLetters_Beep"
        then:
        - audio:
            value: "beep.mp4"
            replace: []
    - test: 
        if: "$CapitalLetters_UseWord"
        then_test:
          if: "$SpeechOverrides_CapitalLetters = ''"
          then_test:
            if: "$Impairment = 'Blindness'"
            then: [t: "mayúscula"]                  #   (en: 'cap', google translation)
          else: [x: "$SpeechOverrides_CapitalLetters"] 
    - pitch:
        value: "$CapitalLetters_Pitch"
        # note: processing of ranges converts '.' into the character, so it needs to be in quotes below
        replace: [spell: "translate('.', 'BCDEFGHIJKLMNOPQRSTUVWXYZ', 'bcdefghijklmnopqrstuvwxyz')"]

 - "0-9": [t: "."]                                  #   (en: '.')

 - "!": [t: "factorial"]                            #  0x21
 - "\"": [t: "barra inversa"]                       #  0x22 (en: 'quotation mark')
 - "#": [t: "almuhadilla"]                          #  0x23 (en: 'number', MathPlayer: 'signo de número', google: 'número')
 - "$": [t: "dólar"]                                #  0x24 (en: 'dollars')
 - "%": [t: "porciento"]                            #  0x25 (en: 'percent')
 - "&": [t: "ampersand"]                            #  0x26
 - "'": [t: "prima"]                                #  0x27 (en: 'apostrophe', MathPlayer: 'apóstrofo', google: 'apóstrofe')
 - "(":                                             #  0x28
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then_test:
            if: "$Verbosity='Terse'"
            then: [t: "abierto"]                    #   (en: 'open', google translation)
            else: [t: "paréntesis izquierdo"]       #   (en: 'open paren', MathPlayer: 'paréntesis', google: 'paréntesis abierto')
        else: [t: "paréntesis izquierdo"]           #   (en: 'left paren', MathPlayer: 'paréntesis', google: 'paréntesis dejado')
 - ")":                                             #  0x29
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then_test:
            if: "$Verbosity='Terse'"
            then: [t: "cerca"]                      #   (en: 'close', google translation)
            else: [t: "paréntesis derecho"]         #   (en: 'close paren', MathPlayer: 'cierra paréntesis', google: 'paréntesis cercana')
        else: [t: "paréntesis derecho"]             #   (en: 'right paren', MathPlayer: 'cierra paréntesis')

 - "*":                                             #  0x2a
    test:
        if: "parent::*[name(.)='msup' or name(.)='msubsup']"
        then: [t: "estrella"]                       #   (en: 'star', google translation)
        else: [t: "por"]                            #   (en: 'times')
 - "+": [t: "más"]                                  #  0x2b (en: 'plus')
 - ",":                                             #  0x2c
    # the following deals with the interaction of "," with "…" which sometimes wants the ',' to be silent
    # that this test is here and not with "…" is not ideal, but seems simplest
     test:
        if:
            - "$SpeechStyle != 'ClearSpeak' or $ClearSpeak_Ellipses = 'Auto' or "
               # must be ClearSpeak and $ClearSpeak_Ellipses = 'AndSoOn'
               # speak "comma" when not adjacent to '…'
            - "( following-sibling::*[1][text()!= '…'] and preceding-sibling::*[1][text()!='…']  ) or "
               # except if expression starts with '…'
            - "../*[1][text()='…'] "
        then: [t: "coma"]                           #   (en: 'comma', google translation)
        # else silent

 - "-": [t: "menos"]                                #  0x2d (en: 'minus')
 - ".":                                             #  0x2e
    - test:
        if: "parent::*[1][self::m:mn]"
        then: [t: "punto"]                          #   (en: 'point', google translation)
        else: [t: "punto"]                          #   (en: 'dot')
 - "/": [t: "barra oblicua"]                        #  0x2f (en: 'divided by')
 - ":": [t: "dos puntos"]                           #  0x3a (en: 'colon')
 - ";": [t: "punto y coma"]                         #  0x3b (en: 'semicolon')
 - "<":                                             #  0x3c
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "menor que"                               #   (en: 'less than')
 - "=":                                             #  0x3d
    - test: 
        if: "$Verbosity!='Terse'"
        then: [t: "es igual a"]                     #   (en: 'is equal to', google translation)
        else: [t: "igual"]                          #   (en: 'equals', google: 'iguales')

 - ">":                                             #  0x3e
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "mayor que"                               #   (en: 'greater than')
 - "?": [t: "interrogación derecho"]                #  0x3f (en: 'question mark', MathPlayer: 'cierra interrogación', google: 'signo de interrogación')
 - "@": [t: "arroba"]                               #  0x40 (en: 'at sign')
 - "[":                                             #  0x5b
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then: [t: "bracket abierto"]                #   (en: 'open bracket', google translation)
        else: [t: "corchete izquierdo"]             #   (en: 'left bracket', MathPlayer: 'abre corchetes', google: 'soporte izquierdo')
 - "\\": [t: "corchete izquierdo"]                  #  0x5c (en: 'back slash', MathPlayer: 'abre corchetes', google: 'back slash')
 - "]":                                             #  0x5d
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then: [t: "cerrar el soporte"]              #   (en: 'close bracket', google translation)
        else: [t: "corchete derecho"]               #   (en: 'right bracket', MathPlayer: 'cierra corchetes', google: 'soporte derecho')
 - "^": [t: "circunflejo"]                          #  0x5e (en: 'hat')
 - "_": [t: "subrayado"]                            #  0x5f (en: 'under bar')
 - "`": [t: "acento grave"]                         #  0x60 (en: 'grave')
 - "{":                                             #  0x7b
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then: [t: "abrazadera abierta"]             #   (en: 'open brace', google translation)
        else: [t: "llave izquierda"]                #   (en: 'left brace', MathPlayer: 'abre llaves', google: 'abrazadera izquierda')
 - "|":                                             #  0x7c
    # note: for ClearSpeak and SimpleSpeak, "|" inside of sets is handled at the mrow level, same for 'sets'
     - test:
        - if: $SpeechStyle != 'ClearSpeak'
          then: [t: "linea vertical"]               #   (en: 'vertical line', google translation)
        - else_if: "$ClearSpeak_VerticalLine = 'SuchThat'"
          then: [t: "tal que"]                      #   (en: 'such that', google translation)
        - else_if: "$ClearSpeak_VerticalLine = 'Given'"  
          then: [t: "dado"]                         #   (en: 'given', google translation)
        - else: [t: "barra vertical"]               #   (en: 'divides')

 - "}":                                             #  0x7d
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then: [t: "cerrar abrazadera"]              #   (en: 'close brace', google translation)
        else: [t: "llaves derecha"]                 #   (en: 'right brace', MathPlayer: 'cierra llaves', google: 'abrazadera derecha')

 - "~": [t: "tilde"]                                #  0x7e
 - " ":                                             #  0xa0
    - test:
        if: "@data-empty-in-2D"
        then: [t: "vacío"]                          #  want to say something for fraction (etc) with empty child    (en: 'empty', google translation)
        else: [t: ""]                            

 - "¢": [t: "centavo"]                              #  0xa2 (en: 'cents')
 - "£": [t: "libra esterlina"]                      #  0xa3 (en: 'pounds')
 - "¬": [t: "negación"]                             #  0xac (en: 'not')
 - "°": [t: "grado"]                                #  0xb0 (en: 'degrees')
 - "±": [t: "más menos"]                            #  0xb1 (en: 'plus or minus')
 - "´": [t: "acento agudo"]                         #  0xb4 (en: 'acute')
 - "·":                                             #  0xB7
    - test:
        if: "$SpeechStyle != 'ClearSpeak' or $ClearSpeak_MultSymbolDot = 'Auto'"
        then: [t: "veces"]                          #   (en: 'times', google translation)
        else: [t: "punto medio"]                    #   (en: 'dot')
 - "×":                                             #  0xd7
    - test:
        if: "$SpeechStyle != 'ClearSpeak' or $ClearSpeak_MultSymbolX = 'Auto'"
        then: [t: "veces"]                          #   (en: 'times', google translation)
        else_test:
            if: $ClearSpeak_MultSymbolX = 'By'
            then: [t: "por"]                        #   (en: 'by', google translation)
            else: [t: "por"]                        #   (en: 'cross')
 - "÷": [t: "dividido"]                             #  0xf7 (en: 'divided by')
 - "̀": [t: "acento grave"]                         #  0x300    (en: 'grave accent embellishment', google: 'embellido de acento grave')
 - "́": [t: "acento agudo"]                         #  0x301    (en: 'acute accent embellishment', google: 'embellido de acento agudo')
 - "̂": [t: "sombrero"]                             #  0x302    (en: 'circumflex accent embellishment', google: 'embellamiento del acento circunflejo')
 - "̃": [t: "tilde"]                                #  0x303    (en: 'tilde embellishment', google: 'tilde adorno')
 - "̄": [t: "barra"]                                #  0x304    (en: 'macron embellishment', google: 'embellido de macron')
 - "̅": [t: "barra"]                                #  0x305    (en: 'overbar embellishment', google: 'embellido de overbar')
 - "̆": [t: "breve"]                                #  0x306
 - "̇": [t: "punto en superescrito"]                #  0x307    (en: 'dot above embellishment', google: 'punto por encima del adorno')

   # Note: ClearSpeak has pref TriangleSymbol for "Δ", but that is wrong
 - "Α-Ω": 
    - test: 
        if: "$CapitalLetters_Beep"
        then:
        - audio:
            value: "beep.mp4"
            replace: []
    - test: 
        if: "$CapitalLetters_UseWord"
        then_test:
          if: "$SpeechOverrides_CapitalLetters = ''"
          then_test:
            if: "$Impairment = 'Blindness'"
            then: [t: "mayúscula"]                  #   (en: 'cap', google translation)
          else: [x: "$SpeechOverrides_CapitalLetters"] 
    - pitch:
        value: "$CapitalLetters_Pitch"
        # note: processing of ranges converts '.' into the character, so it needs to be in quotes below
        replace: [spell: "translate('.', 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ΢ΣΤΥΦΧΨΩ', 'αβγδεζηθικλμνξοπρςστυφχψω')"]

 - "α": [t: "alfa"]                                 #  0x3b1    (en: 'alpha')
 - "β": [t: "beta"]                                 #  0x3b2
 - "γ": [t: "gamma"]                                #  0x3b3    (google: 'gama')
 - "δ": [t: "delta"]                                #  0x3b4
 - "ε": [t: "épsilon"]                              #  0x3b5    (en: 'epsilon', google: 'epsilon')
 - "ζ": [t: "zeta"]                                 #  0x3b6
 - "η": [t: "eta"]                                  #  0x3b7
 - "θ": [t: "theta"]                                #  0x3b8
 - "ι": [t: "iota"]                                 #  0x3b9
 - "κ": [t: "kappa"]                                #  0x3ba
 - "λ": [t: "lambda"]                               #  0x3bb
 - "μ": [t: "my"]                                   #  0x3bc    (en: 'mu', google: 'mu')
 - "ν": [t: "ny"]                                   #  0x3bd    (en: 'nu', google: 'nu')
 - "ξ": [t: "xi"]                                   #  0x3be    (en: 'zai', google: 'zai')
 - "ο": [t: "ómicron"]                              #  0x3bf    (en: 'omicron', google: 'omicron')
 - "π": [t: "pi"]                                   #  0x3c0
 - "ρ": [t: "rho"]                                  #  0x3c1
 - "ς": [t: "sigma final"]                          #  0x3c2    (en: 'final sigma', google: 'final sigma')
 - "σ": [t: "sigma"]                                #  0x3c3
 - "τ": [t: "tau"]                                  #  0x3c4
 - "υ": [t: "ípsilon"]                              #  0x3c5    (en: 'upsilon', google: 'upsilon')
 - "φ": [t: "phi"]                                  #  0x3c6    (google: 'fi')
 - "χ": [t: "ji"]                                   #  0x3c7    (en: 'chi', google: 'chi')
 - "ψ": [t: "psi"]                                  #  0x3c8
 - "ω": [t: "omega"]                                #  0x3c9
 - "ϕ": [t: "phi recta"]                            #  0x3d5    (en: 'phi', google: 'fi')
 - "ϖ": [t: "variante de pi"]                       #  0x3d6    (en: 'pi', google: 'pi')
 - "ϵ": [t: "variante de épsilon"]                  #  0x3f5    (en: 'epsilon', google: 'epsilon')
 - "϶": [t: "épsilon invertido"]                    #  0x3f6    (en: 'reversed epsilon')

 - "–": [t: "en raya"]                              #  0x2013   (en: 'en dash')
 - "—": [t: "em raya"]                              #  0x2014   (en: 'em dash')
 - "―": [t: "barra horizontal"]                     #  0x2015   (en: 'horizontal bar')
 - "‖": [t: "doble barra vertical"]                 #  0x2016   (en: 'double vertical line')
 - "…":                                             #  0x2026
    test:
        if:
            - "$SpeechStyle != 'ClearSpeak' or $ClearSpeak_Ellipses = 'Auto' or"
               # must be ClearSpeak and $ClearSpeak_Ellipses = 'AndSoOn'
               # speak '…' as 'and so on...' unless expr starts with '…'
            - "../*[1][text()='…']"
        then: [t: "punto punto punto"]              #   (en: 'dot dot dot', google translation)
        else_test:                                  #  must have $ClearSpeak_Ellipses = 'AndSoOn'
            if: "count(following-sibling::*) = 0"
            then: [t: "etcétera"]                   #   (en: 'and so on', google translation)
            else: [t: "puntos suspensivos"]         #   (en: 'and so on up to', MathPlayer: 'punto punteado punteado', google: 'y así sucesivamente')

 - "⁡":                                             #  0x2061
    - test:
        if: "$Verbosity!='Terse' and not(preceding-sibling::*[1][IsInDefinition(., 'GeometryShapes')])" 
        then: [t: "de"]                             #   (en: 'of', google translation)
 - "⁢": [t: ""]                                     #  0x2062
 - "⁣": [t: ""]                                     #  0x2063
 - "⁤": [t: "más"]                                  #  0x2064   (en: 'and', google: 'y')
 - "′": [t: "prima"]                                #  0x2032   (en: 'prime')
 - "″": [t: "dos prima"]                            #  0x2033   (en: 'double prime', MathPlayer: 'segunda', google: 'doble primo')
 - "‴": [t: "tres prima"]                           #  0x2034   (en: 'triple prime', MathPlayer: 'tercera', google: 'triple prime')
 - "‵": [t: "acento grave"]                         #  0x2035   (en: 'reversed prime')
 - "‶": [t: "doble acento grave"]                   #  0x2036   (en: 'reversed double prime')
 - "‷": [t: "prima invertido"]                      #  0x2037   (en: 'reversed triple prime', google: 'triple prime invertido')

 - "ℂℕℚℝℤ":                                         #  here we rely on this running through the table again to speak "cap xxx"
    - t: "prima invertido"                          #   (en: 'double-struck', google: 'doble golpe')
    - spell: "translate('.', 'ℂℕℚℝℤ', 'CNQRZ')"

 - "℃": [t: "grados Centígrados"]                   #  0x2103   (en: 'degrees celsius', google: 'grados celsius')
 - "℉": [t: "grados fahrenheit"]                    #  0x2109   (en: 'degrees fahrenheit')
 - "ℋℛℓ":                                           #  0x210b
    - t: "grados fahrenheit"                        #   (en: 'script', google: 'guion')
    - spell: "translate('.', 'ℋℛℓ', 'HRl')"
 - "ℎ": [t: "constante de planck"]                  #  0x210e   (en: 'planck constant', MathPlayer: 'constante de Planck', google: 'planck constante')
 - "ℜ":                                             #  0x211c
    - t: "r mayúscula partida"                      #   (en: 'fraktur', google: 'fraktur')
    - spell: "'R'"

 - "Ω": [t: "ohmio"]                                #  0x2126   (en: 'ohms')
 - "K": [t: "grados kelvin"]                        #  0x212a   (en: 'kelvin')
 - "Å": [t: "angstrom"]                             #  0x212b   (en: 'angstroms')
 - "ⅆⅇⅈⅉ":                                          #  0x2146-9
    - t: "angstrom"                                 #   (en: 'double-struck italic')
    - spell: "translate('.', 'ⅆⅇⅈⅉ', 'deij')"

 - "←": [t: "flecha izquierda"]                     #  0x2190   (en: 'leftwards arrow')
 - "↑": [t: "flecha arriba"]                        #  0x2191   (en: 'upwards arrow')
 - "→":                                             #  0x2192
     - test:
        if: "ancestor::*[2][self::m:limit]"
        then: [t: "enfoques"]                       #   (en: 'approaches', google translation)
        else: [t: "flecha derecha"]                 #   (en: 'right arrow', MathPlayer: 'flecha', google: 'flecha correcta')

 - "↓": [t: "flecha abajo"]                         #  0x2193   (en: 'downwards arrow')
 - "⇒": [t: "flecha doble"]                         #  0x21d2   (en: 'rightwards double arrow')
 - "∀": [t: "para todo"]                            #  0x2200   (en: 'for all')
 - "∂":                                             #  0x2202
     - test: 
         if: "$Verbosity='Terse'"
         then: [t: "parcial"]                       #   (en: 'partial', google translation)
         else: [t: "derivada parcial"]              #   (en: 'partial derivative')
 - "∃": [t: "existe"]                               #  0x2203   (en: 'there exists')
 - "∄": [t: "no existe"]                            #  0x2204   (en: 'there does not exist')
 - "∅": [t: "conjunto vacío"]                       #  0x2205   (en: 'empty set')
 - "∆":                                             #  0x2206
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "el"]                            #   (en: 'the', google translation)
     - t: "incremento"                              #   (en: 'laplacian of')
 - "∇":                                             #  0x2207
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "el"]                            #   (en: 'the', google translation)
     - t: "gradiente"                               #   (en: 'gradient of', google: 'gradiente de')
 - "∈":                                             #  0x2208
     - test:
        if: "$SpeechStyle != 'ClearSpeak'"
        then: [t: "un elemento de"]                 #   (en: 'an element of', google translation)
        # Several options for speaking elements in ClearSpeak -- they split between being inside a set or not and then the option
        else_test:
            if: "../../self::m:set or ../../../self::m:set" #  inside a set
            then_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'In'
                then: [t: "en"]                     #   (en: 'in', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Member'
                then: [t: "miembro de"]             #   (en: 'member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [t: "elemento de"]            #   (en: 'element of', google translation)
              - else: [t: "perteneciente a"]        #  $ClearSpeak_SetMemberSymbol = 'Belongs'  (en: 'belonging to')
            else_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'Member'
                then: [t: "es miembro de"]          #   (en: 'is a member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [t: "es un elemento de"]      #   (en: 'is an element of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'In'
                then: [t: "es en"]                  #   (en: 'is in', google translation)
              - else: [t: "perteneciente a"]        #  $ClearSpeak_SetMemberSymbol = 'Belongs'  (en: 'belongs to')
 - "∉":                                             #  0x2209
    # rule is identical to 0x2208
     - test:
        if: "$SpeechStyle != 'ClearSpeak'"
        then: [t: "no es un elemento de"]           #   (en: 'is not an element of', google translation)
        # Several options for speaking elements in ClearSpeak -- they split between being inside a set or not and then the option
        else_test:
            if: "../../self::m:set or ../../../self::m:set" #  inside a set
            then_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'In'
                then: [t: "no en"]                  #   (en: 'not in', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Member'
                then: [t: "no miembro de"]          #   (en: 'not member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [t: "no elemento de"]         #   (en: 'not element of', google translation)
              - else: [t: "no perteneciente a"]     #  $ClearSpeak_SetMemberSymbol = 'Belongs'  (en: 'not belonging to')
            else_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'Member'
                then: [t: "no es miembro de"]       #   (en: 'is not a member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [t: "no es un elemento de"]   #   (en: 'is not an element of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'In'
                then: [t: "no está dentro"]         #   (en: 'is not in', google translation)
              - else: [t: "no perteneciente a"]     #  $ClearSpeak_SetMemberSymbol = 'Belongs'  (en: 'does not belong to')
 - "∊":                                             #  0x220a
     - test:
        if: "$SpeechStyle != 'ClearSpeak'"
        then: [t: "es un elemento de"]              #   (en: 'is an element of', google translation)
        # Several options for speaking elements in ClearSpeak -- they split between being inside a set or not and then the option
        else_test:
            if: "../../self::m:set or ../../../self::m:set" #  inside a set
            then_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'In'
                then: [t: "en"]                     #   (en: 'in', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Member'
                then: [t: "miembro de"]             #   (en: 'member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [t: "elemento de"]            #   (en: 'element of', google translation)
              - else: [t: "perteneciente a"]        #  $ClearSpeak_SetMemberSymbol = 'Belongs'  (en: 'belonging to')
            else_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'Member'
                then: [t: "es miembro de"]          #   (en: 'is a member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [t: "es un elemento de"]      #   (en: 'is an element of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'In'
                then: [t: "es en"]                  #   (en: 'is in', google translation)
              - else: [t: "perteneciente a"]        #  $ClearSpeak_SetMemberSymbol = 'Belongs'  (en: 'belongs to')
 - "∏": [t: "producto"]                             #  0x220f   (en: 'product')
 - "∐": [t: "coproducto"]                           #  0x2210   (en: 'co-product')
 - "∑": [t: "suma"]                                 #  0x2211   (en: 'sum', SRE: 'sumatorio')
 - "−": [t: "menos"]                                #  0x2212   (en: 'minus')
 - "∓": [t: "menos más"]                            #  0x2213   (en: 'minus or plus')
 - "∗": [t: "asterisco"]                            #  0x2217   (en: 'times')
 - "∘": [t: "composición"]                          #  0x2218   (en: 'composed with')
 - "√":                                             #  0x221a
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "el"]                            #   (en: 'the', google translation)
     - t: "raíz"                                    #   (en: 'square root of')
 - "∝":                                             #  0x221d
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "proporcional a"                          #   (en: 'proportional to')
 - "∞": [t: "infinito"]                             #  0x221e   (en: 'infinity')
 - "∟": [t: "ángulo recto"]                         #  0x221f   (en: 'right angle')
 - "∠": [t: "ángulo"]                               #  0x2220   (en: 'angle')
 - "∡": [t: "ángulo medido"]                        #  0x2221   (en: 'measured angle')
 - "∣": [t: "divide a"]                             #  0x2223   (en: 'divides')
 - "∤": [t: "no divide a"]                          #  0x2224   (en: 'does not divide')
 - "∥":                                             #  0x2225
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "paralela a"                              #   (en: 'parallel to')
 - "∦":                                             #  0x2226
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "no paralela a"                           #   (en: 'not parallel to')
 - "∧": [t: "y"]                                    #  0x2227   (en: 'and')
 - "∨": [t: "o"]                                    #  0x2228   (en: 'or')
 - "∩": [t: "intersección"]                         #  0x2229   (en: 'intersection')
 - "∪": [t: "unión"]                                #  0x222a   (en: 'union')
 - "∫": [t: "integral"]                             #  0x222b
 - "∬": [t: "integral doble"]                       #  0x222c   (en: 'double integral')
 - "∭": [t: "integral triple"]                      #  0x222d   (en: 'triple integral')
 - "∮": [t: "integral de contorno"]                 #  0x222e   (en: 'contour integral')
 - "∶":                                             #  0x2236
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "razón"                                   #   (en: 'to')
 - "∷": [t: "proporción"]                           #  0x2237   (en: 'as')
 - "∼": [t: "tilde"]                                #  0x223c   (en: 'varies with')
 - "∽": [t: "tilde invertido"]                      #  0x223d   (en: 'reversed tilde')
 - "∾":                                             #  0x223e
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "s horizontal invertida"                  #   (en: 'most positive')
 - "∿": [t: "sinusoide"]                            #  0x223f   (en: 'sine wave')
 - "≠":                                             #  0x2260
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "no es igual a"                           #   (en: 'not equal to', MathPlayer: 'distinto de', google: 'no igual a')
 - "≡":                                             #  0x2261
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "idéntico a"                              #   (en: 'identical to')
 - "≤":                                             #  0x2264
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t:  "less than or equal to"
 - "≥":                                             #  0x2265
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "mayor o igual que"                       #   (en: 'greater than or equal to')
 - "≦": [t: "menor o igual que"]                    #  0x2266   (en: 'less than over equal to')
 - "≧": [t: "mayor o igual que"]                    #  0x2267   (en: 'greater than over equal to')
 - "≺": [t: "precede a"]                            #  0x227a   (en: 'precedes')
 - "≻": [t: "sigue a"]                              #  0x227b   (en: 'succeeds')
 - "⊂":                                             #  0x2282
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es un"]                         #   (en: 'is a', google translation)
     - t: "incluido en"                             #   (en: 'subset of')
 - "⊃":                                             #  0x2283
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es un"]                         #   (en: 'is a', google translation)
     - t: "contiene a"                              #   (en: 'superset of')
 - "⊄":                                             #  0x2284
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "no incluido en"                          #   (en: 'not a subset of')
 - "⊅":                                             #  0x2285
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es"]                            #   (en: 'is', google translation)
     - t: "no contiene a"                           #   (en: 'not a superset of')
 - "⊆":                                             #  0x2286
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es un"]                         #   (en: 'is a', google translation)
     - t: "incluido o igual a"                      #   (en: 'subset of or equal to')
 - "⊇":                                             #  0x2287
     - test: 
         if: "$Verbosity!='Terse'"
         then: [t: "es un"]                         #   (en: 'is a', google translation)
     - t: "contiene o es igual a"                   #   (en: 'superset of or equal to')
